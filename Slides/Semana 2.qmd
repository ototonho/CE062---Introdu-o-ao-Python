---
title: "Semana 2"
format: pdf
editor: visual
---

## Operações Matemáticas Básicas

```{python}
print("Olá, Mundo")

## adição
2 + 3

## subtração
5 - 3

## Multiplicação
5 * 6

## Divisão
12 / 6

## Valor Absoluto
abs(-5)

## Potenciação
2 ** 5
```

### Importando a Biblioteca Math para operações mais compplexas

```{python}
import math

## Raiz quadrada
math.sqrt(9)

## Exponencial
math.exp(8)

## Logaritmo base 10
math.log10(10)

## Logaritmo Natural
math.log(2)

## Fatorial
math.factorial(5)

## Funções Trigonométricas
math.sin(6)

```

## Tipos de Variáveis

Tipos básicos de variáveis:

-   int --> Inteiro
-   float --> números decimais
-   str --> conjunto de caracteres

Exemplo:

```{python}
x = 10 # int
y = 3.14 # float
nome = "Eberechi"

print(type(x))
print(type(y))
print(type(nome))

```

Em Python, o nome de uma variável deve sempre começar com uma letra. Após a primeira letra, podem ser utilizados números e o caractere sublinhado (\_). O sublinhado também é permitido como primeiro caractere, embora seu uso inicial seja maiscomum para indicar variáveis internas ou especiais.

## Strings

Em Python, strings são sequências de caracteres, como palavras, frases ou textos completos. Podem ser definidas usando aspas simples ('...') ou aspas duplas ("..."). Para exibir o conteúdo de uma string na tela, utiliza-se a função print().

```{python}
mensagem = "Vamos, Furacão"
print(mensagem)

```

Para juntar (concatenar) duas ou mais strings em Python, utiliza-se o operador +. É importante que todos os elementos sejam strings; caso contrário, será necessário converter ovalor com str().

```{python}
nome = "Eberechi"
sobrenome = "Eze"
nome_completo_s_espaço = nome + sobrenome
nome_completo = nome + " " + sobrenome
print(nome_completo_s_espaço)
print(nome_completo)

```

### Manipulação de Strings

```{python}
teste = "O Bruno Zapelli foi o cara da partida"
len(teste) # retorna o tamanho do string
teste.capitalize() # retorna a string com a primeira letra maiúscula
teste.count("a") # informa quantas vezes o caractere aparece na string
teste.startswith("O") # verifica se a string inicia com determinada sequência
teste.endswith("b") #verifica se a string termina com determinada sequência
teste.isalnum() # verifica se a string consiste apenas em caracteres alfanuméricos
teste.isalpha() # verifica se a string consiste apenas em letras
teste.islower() # verifica se a string consiste apenas em caracteres minúsculos
teste.isupper() # verifica se a string consiste apenas em caracteres maiúsculos
teste.lower() # retorna a string com todos os caracteres em minúsculo
teste.upper() # retorna a string com todos os caracteres em maiúsculo
teste.swapcase() #inverte maiúsculas e minúsculas
teste.title() #deixa todas as primeiras letras em maiúsculo
teste.split() #transforma a string em uma lista, dividindo todas as suas partes
teste.replace("cara","homem") # substitui S1 por S2 na string
teste.find("r") # retorna o índice da primeira ocorrência de um caractere (ou -1 se não encontrado)
teste2 = "Zapelli"
teste2.ljust(25) # retorna a string para um tamanho mínimo, alinhando à esquerda
teste2.rjust(25) # retorna a string para um tamanho mínimo, alinhando à direita
teste2.center(25) # retorna a string para um tamanho mínimo, centralizando
teste2.lstrip() # remove os espaços à esquerda da string
teste2.rstrip() # remove os espaços à direita da string
teste2.strip() # remove os espaços em branco dos dois lados da string

```

### Operações com Strings

As variáveis do tipo **string** suportam diferentes tipos de operações, entre elas:

- Fatiamento: Permite obter apenas uma parte de uma string, também chamada de fatia.
- Concatenação: Junta duas ou mais strings para formar uma nova string maior.
- Composição: Muito usada em mensagens exibidas na tela. Consiste em usar strings como modelos, onde é possível inserir outras strings ou valores.

#### Fatiamento de Strings

O fatiamento (*slicing*) é um recurso usado para obter apenas uma parte dos caracteres de uma
string. A sintaxe básica é:

- O limite_inferior indica a posição inicial (incluída).
- O limite_superior indica a posição final (não incluída).
- A contagem de posições começa em 0.

Por exemplo, "ABC"[0:2] retorna "AB", pois pega da posição 0 até antes da posição 2.
Essa regra é chamada de intervalo fechado no início e aberto no fim.

#####**Exemplos de fatiamento**:

```{python}
s = "Python"
s[1:4] # pega os caracteres nas posições 1, 2 e 3
s[2:] # pega os índices de 2 até o final
s[:4] # pega do início até a posição 3

```

####Concatenação de Strings

A **concatenação** é a operação de unir duas ou mais strings em uma única sequência de caracteres.

- Usamos o operador + para juntar strings.
- Podemos também repetir uma string usando o operador *.
- Útil para criar mensagens e compor textos dinamicamente.

#####**Exemplos de concatenação**:

```{python}
s = "ABC"
s + "C"
s + "D" * 4
"X" + "-" * 10 + "X"
s + "x4 = " + s*4

```

####Composição de Strings

A **composição** é usada para inserir valores em uma string de forma controlada,
utilizando **marcadores de posição** (% + tipo).

Principais marcadores:

- %d → números inteiros
- %s → strings
- %f → números decimais

Também é possível controlar:

- Tamanho mínimo (%3d)
- Zeros à esquerda (%03d)
- Casas decimais (%5.2f)

Útil para exibir mensagens formatadas, relatórios e valores monetários.

#####**Exemplos de composição**:

```{python}
idade = 22
print("[%d]" % idade)
print("[%03d]" % idade)
print("[%3d]" % idade) 
print("%5.2f" % 5) 

idade = 22
nome = "Eberechi Eze"
grana = 51.34
print("%s tem %d anos e R$%5.2f no bolso" % (nome, idade, grana))

```

